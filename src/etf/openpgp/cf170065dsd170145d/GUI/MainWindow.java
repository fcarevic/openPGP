package etf.openpgp.cf170065dsd170145d.GUI;

import etf.openpgp.cf170065dsd170145d.keyGeneration.PGPAsymmetricKeyUtil;
import etf.openpgp.cf170065dsd170145d.keyGeneration.PGPKeyExporter;
import etf.openpgp.cf170065dsd170145d.keyGeneration.PGPKeyInfo;
import java.awt.font.NumericShaper;
import java.security.Security;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JDialog;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import org.bouncycastle.jce.provider.BouncyCastleProvider;
import org.bouncycastle.openpgp.PGPEncryptedData;
import org.bouncycastle.openpgp.PGPException;
import org.bouncycastle.openpgp.PGPPublicKeyRing;
import org.bouncycastle.openpgp.PGPSecretKey;
import org.bouncycastle.openpgp.PGPSecretKeyRing;
import etf.openpgp.cf170065dsd170145d.services.ExtendedPGPException;
import etf.openpgp.cf170065dsd170145d.services.PGPMessageSenderDriver;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author Du≈°an
 */
public class MainWindow extends javax.swing.JFrame {

    /**
     * Creates new form MainWindow
     */
    public MainWindow() {
        initComponents();
        customInit();
    }

    private void customInit() {
        signMessageOptionPanel.setVisible(false);
        encrytpionMessageOptionPanel.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        keyType = new javax.swing.ButtonGroup();
        keySize = new javax.swing.ButtonGroup();
        showKeyRing = new javax.swing.ButtonGroup();
        fileChooser = new javax.swing.JFileChooser();
        passwordRequestDialog = new javax.swing.JDialog(this);
        jPanel4 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        passwordField = new javax.swing.JPasswordField();
        jButton5 = new javax.swing.JButton();
        chooseMessageSourceFC = new javax.swing.JFileChooser();
        chooseMessageDestinationFC = new javax.swing.JFileChooser();
        jComboBox2 = new javax.swing.JComboBox<>();
        encrAlgoGroup = new javax.swing.ButtonGroup();
        showKeyRingCollectionPane = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        userNameTF = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        userEmailTF = new javax.swing.JTextField();
        dsaRB = new javax.swing.JRadioButton();
        elGamalRB = new javax.swing.JRadioButton();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jRadioButton6 = new javax.swing.JRadioButton();
        jRadioButton7 = new javax.swing.JRadioButton();
        keySize4096RB = new javax.swing.JRadioButton();
        generateNewKeyPaitButton = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        keyRingTable = new javax.swing.JTable(){
            public boolean editCellAt(int row, int column, java.util.EventObject e) {
                return false;
            }
        };
        showSecretKeysRingRB = new javax.swing.JRadioButton();
        showPublicKeysRingRB = new javax.swing.JRadioButton();
        exportPU = new javax.swing.JButton();
        deleteKey = new javax.swing.JButton();
        exportPK = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        jPanel7 = new javax.swing.JPanel();
        chooseMessageSourceButton = new javax.swing.JButton();
        chooseMessageDestinationButton = new javax.swing.JButton();
        signCB = new javax.swing.JCheckBox();
        jLabel7 = new javax.swing.JLabel();
        encryptCB = new javax.swing.JCheckBox();
        encrytpionMessageOptionPanel = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        publicKeyList = new javax.swing.JList<>();
        jLabel4 = new javax.swing.JLabel();
        jRadioButton3 = new javax.swing.JRadioButton();
        jRadioButton4 = new javax.swing.JRadioButton();
        signMessageOptionPanel = new javax.swing.JPanel();
        jLabel9 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        secretKeyList = new javax.swing.JList<>();
        compressionCheckbox = new javax.swing.JCheckBox();
        radixCheckbox = new javax.swing.JCheckBox();
        jButton8 = new javax.swing.JButton();
        jPanel6 = new javax.swing.JPanel();
        jButton6 = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();
        jButton9 = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        ImportKeyMessage = new javax.swing.JLabel();

        passwordRequestDialog.setModal(true);
        passwordRequestDialog.setResizable(false);
        passwordRequestDialog.setSize(new java.awt.Dimension(400, 350));

        jPanel4.setPreferredSize(new java.awt.Dimension(500, 300));

        jLabel3.setText("Type password for your private key");

        passwordField.setText("jPasswordField1");
        passwordField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                passwordFieldActionPerformed(evt);
            }
        });

        jButton5.setText("Submit");
        jButton5.setFocusPainted(false);
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(108, 108, 108)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(passwordField)
                    .addComponent(jButton5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(107, 107, 107))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(81, 81, 81)
                .addComponent(jLabel3)
                .addGap(18, 18, 18)
                .addComponent(passwordField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(29, 29, 29)
                .addComponent(jButton5)
                .addContainerGap(108, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout passwordRequestDialogLayout = new javax.swing.GroupLayout(passwordRequestDialog.getContentPane());
        passwordRequestDialog.getContentPane().setLayout(passwordRequestDialogLayout);
        passwordRequestDialogLayout.setHorizontalGroup(
            passwordRequestDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(passwordRequestDialogLayout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE))
        );
        passwordRequestDialogLayout.setVerticalGroup(
            passwordRequestDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, 306, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        jComboBox2.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        showKeyRingCollectionPane.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                showKeyRingCollectionPaneMouseClicked(evt);
            }
        });

        userNameTF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                userNameTFActionPerformed(evt);
            }
        });

        jLabel2.setText("Name");

        jLabel1.setText("Email");

        keyType.add(dsaRB);
        dsaRB.setText("Sign key(DSA)");
        dsaRB.setToolTipText("");
        dsaRB.setActionCommand("DSA");
        dsaRB.setPreferredSize(new java.awt.Dimension(100, 25));
        dsaRB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dsaRBActionPerformed(evt);
            }
        });

        keyType.add(elGamalRB);
        keyType.setSelected(elGamalRB.getModel(), true);
        elGamalRB.setText("Encryption key(EL GAMAL)");
        elGamalRB.setActionCommand("ELGAMAL");
        elGamalRB.setPreferredSize(new java.awt.Dimension(100, 25));
        elGamalRB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                elGamalRBActionPerformed(evt);
            }
        });

        jLabel5.setText("Key type:");

        jLabel6.setText("Key size:");

        keySize.add(jRadioButton6);
        jRadioButton6.setText("1024");
        jRadioButton6.setActionCommand("1024");
        jRadioButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton6ActionPerformed(evt);
            }
        });

        keySize.add(jRadioButton7);
        jRadioButton7.setActionCommand("2048");
        jRadioButton7.setText("2048");

        keySize.add(keySize4096RB);
        keySize.setSelected(keySize4096RB.getModel(), true);
        keySize4096RB.setText("4096");
        keySize4096RB.setActionCommand("4096");

        generateNewKeyPaitButton.setText("Submit");
        generateNewKeyPaitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generateNewKeyPaitButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(211, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(dsaRB, javax.swing.GroupLayout.PREFERRED_SIZE, 234, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, 50, Short.MAX_VALUE))
                            .addGap(39, 39, 39)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(userNameTF, javax.swing.GroupLayout.DEFAULT_SIZE, 145, Short.MAX_VALUE)
                                .addComponent(userEmailTF)))
                        .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(jLabel6, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(generateNewKeyPaitButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(keySize4096RB, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jRadioButton7, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jRadioButton6, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(elGamalRB, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 234, Short.MAX_VALUE)))
                .addContainerGap(204, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(54, 54, 54)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(11, 11, 11))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(userNameTF)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(userEmailTF, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(5, 5, 5)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(dsaRB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(elGamalRB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jRadioButton6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jRadioButton7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(keySize4096RB)
                .addGap(47, 47, 47)
                .addComponent(generateNewKeyPaitButton)
                .addContainerGap(73, Short.MAX_VALUE))
        );

        showKeyRingCollectionPane.addTab("Generate new key pair", jPanel1);

        keyRingTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},{null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},{null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},{null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}

            },
            columNameString
        ));
        keyRingTable.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        keyRingTable.setRequestFocusEnabled(false);
        jScrollPane1.setViewportView(keyRingTable);

        showKeyRing.add(showSecretKeysRingRB);
        showSecretKeysRingRB.setText("Secret key ring");
        showSecretKeysRingRB.setSelected(true);
        showSpecificKeyRingCollection();
        showSecretKeysRingRB.setActionCommand("");
        showSecretKeysRingRB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showSecretKeysRingRBActionPerformed(evt);
            }
        });

        showKeyRing.add(showPublicKeysRingRB);
        showPublicKeysRingRB.setText("Public key ring");
        showPublicKeysRingRB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showPublicKeysRingRBActionPerformed(evt);
            }
        });

        exportPU.setText("Export PU");
        exportPU.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportPUActionPerformed(evt);
            }
        });

        deleteKey.setText("Delete");
        deleteKey.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteKeyActionPerformed(evt);
            }
        });

        exportPK.setText("Export PK");
        exportPK.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportPKActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 649, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(showPublicKeysRingRB, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(showSecretKeysRingRB, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addComponent(deleteKey, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(exportPU, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(exportPK, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 357, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(showSecretKeysRingRB)
                    .addComponent(exportPU)
                    .addComponent(deleteKey))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(showPublicKeysRingRB)
                    .addComponent(exportPK))
                .addContainerGap(40, Short.MAX_VALUE))
        );

        showKeyRingCollectionPane.addTab("Show key rings", jPanel2);

        chooseMessageSourceButton.setText("Choose message source");
        chooseMessageSourceButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chooseMessageSourceButtonActionPerformed(evt);
            }
        });

        chooseMessageDestinationButton.setText("Choose message destination");
        chooseMessageDestinationButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chooseMessageDestinationButtonActionPerformed(evt);
            }
        });

        signCB.setText("Sign");
        signCB.setPreferredSize(new java.awt.Dimension(70, 24));
        signCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                signCBActionPerformed(evt);
            }
        });

        jLabel7.setText("Message Options:");

        encryptCB.setText("Encrypt");
        encryptCB.setPreferredSize(new java.awt.Dimension(70, 24));
        encryptCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                encryptCBActionPerformed(evt);
            }
        });

        jLabel8.setText("Encryption algoritm:");

        publicKeyList.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane2.setViewportView(publicKeyList);

        jLabel4.setText("Choose keys from public ring for encryption");

        encrAlgoGroup.add(jRadioButton3);
        jRadioButton3.setText("3DES with EDE configuration");
        jRadioButton3.setActionCommand("3DES");

        encrAlgoGroup.add(jRadioButton4);
        jRadioButton4.setSelected(true);
        jRadioButton4.setText("IDEA");
        jRadioButton4.setActionCommand("IDEA");

        javax.swing.GroupLayout encrytpionMessageOptionPanelLayout = new javax.swing.GroupLayout(encrytpionMessageOptionPanel);
        encrytpionMessageOptionPanel.setLayout(encrytpionMessageOptionPanelLayout);
        encrytpionMessageOptionPanelLayout.setHorizontalGroup(
            encrytpionMessageOptionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(encrytpionMessageOptionPanelLayout.createSequentialGroup()
                .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(encrytpionMessageOptionPanelLayout.createSequentialGroup()
                .addGroup(encrytpionMessageOptionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jRadioButton4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jRadioButton3, javax.swing.GroupLayout.DEFAULT_SIZE, 225, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, encrytpionMessageOptionPanelLayout.createSequentialGroup()
                        .addGap(4, 4, 4)
                        .addGroup(encrytpionMessageOptionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, 221, Short.MAX_VALUE)
                            .addComponent(jScrollPane2))))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        encrytpionMessageOptionPanelLayout.setVerticalGroup(
            encrytpionMessageOptionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(encrytpionMessageOptionPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jRadioButton3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jRadioButton4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 14, Short.MAX_VALUE)
                .addComponent(jLabel4)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(14, 14, 14))
        );

        jLabel9.setText("Choose private key for sign");

        secretKeyList.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        secretKeyList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane3.setViewportView(secretKeyList);

        javax.swing.GroupLayout signMessageOptionPanelLayout = new javax.swing.GroupLayout(signMessageOptionPanel);
        signMessageOptionPanel.setLayout(signMessageOptionPanelLayout);
        signMessageOptionPanelLayout.setHorizontalGroup(
            signMessageOptionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(signMessageOptionPanelLayout.createSequentialGroup()
                .addGap(81, 81, 81)
                .addGroup(signMessageOptionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(signMessageOptionPanelLayout.createSequentialGroup()
                        .addComponent(jLabel9, javax.swing.GroupLayout.DEFAULT_SIZE, 213, Short.MAX_VALUE)
                        .addContainerGap())
                    .addComponent(jScrollPane3)))
        );
        signMessageOptionPanelLayout.setVerticalGroup(
            signMessageOptionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(signMessageOptionPanelLayout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addComponent(jLabel9)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(40, Short.MAX_VALUE))
        );

        compressionCheckbox.setText("Compression(with ZIP)");
        compressionCheckbox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                compressionCheckboxActionPerformed(evt);
            }
        });

        radixCheckbox.setText("Conversion(radix64)");

        jButton8.setText("Send message");
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel7Layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(radixCheckbox, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(compressionCheckbox, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(signMessageOptionPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(encryptCB, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(signCB, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(chooseMessageSourceButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(chooseMessageDestinationButton, javax.swing.GroupLayout.DEFAULT_SIZE, 225, Short.MAX_VALUE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(encrytpionMessageOptionPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(35, 35, 35))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel7Layout.createSequentialGroup()
                .addContainerGap(171, Short.MAX_VALUE)
                .addComponent(jButton8, javax.swing.GroupLayout.PREFERRED_SIZE, 311, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(167, 167, 167))
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addComponent(chooseMessageSourceButton)
                        .addGap(25, 25, 25)
                        .addComponent(chooseMessageDestinationButton)
                        .addGap(39, 39, 39)
                        .addComponent(jLabel7)
                        .addGap(17, 17, 17)
                        .addComponent(encryptCB, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(signCB, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(encrytpionMessageOptionPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addComponent(radixCheckbox)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(compressionCheckbox))
                    .addComponent(signMessageOptionPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton8)
                .addGap(60, 60, 60))
        );

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel7, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        showKeyRingCollectionPane.addTab("Send message", jPanel5);

        jButton6.setText("Choose message source");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jButton7.setText("Choose message destination");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        jButton9.setText("Receive message");
        jButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton9ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                .addGap(170, 170, 170)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButton7, javax.swing.GroupLayout.DEFAULT_SIZE, 310, Short.MAX_VALUE)
                    .addComponent(jButton6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                        .addComponent(jButton9, javax.swing.GroupLayout.PREFERRED_SIZE, 265, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(25, 25, 25)))
                .addGap(169, 169, 169))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGap(63, 63, 63)
                .addComponent(jButton6, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton7, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(70, 70, 70)
                .addComponent(jButton9)
                .addContainerGap(122, Short.MAX_VALUE))
        );

        showKeyRingCollectionPane.addTab("Receive Message", jPanel6);

        jButton3.setText("Import key to secret key ring");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText("Import key to public key ring");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(156, 156, 156)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(ImportKeyMessage, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, 333, Short.MAX_VALUE))
                .addContainerGap(160, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(68, 68, 68)
                .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(29, 29, 29)
                .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(39, 39, 39)
                .addComponent(ImportKeyMessage, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(42, Short.MAX_VALUE))
        );

        showKeyRingCollectionPane.addTab("Import key", jPanel3);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(showKeyRingCollectionPane)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(showKeyRingCollectionPane, javax.swing.GroupLayout.PREFERRED_SIZE, 517, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void userNameTFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_userNameTFActionPerformed
        // TODO add your handling code here:

    }//GEN-LAST:event_userNameTFActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        String path = getSelectedFile();
        if (path.length() == 0) {
            return;
        }
        boolean successful = pGPAsymmetricKeyUtil.importKeyToSCKeyRingCollection(path);
        if (!successful) {
            GUIUtil.showErrorMessage("Some error with file, try againl");
        } else {
            GUIUtil.showInfoMessage("Key successfully imported");
            pGPAsymmetricKeyUtil.saveSCKeyRingCollection();
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed

        String path = getSelectedFile();
        if (path.length() == 0) {
            return;
        }

        boolean successful = pGPAsymmetricKeyUtil.importKeyToPUKeyRingCollection(path);
        if (!successful) {
            GUIUtil.showErrorMessage("Some error with file, try againl");
        } else {
            GUIUtil.showInfoMessage("Key successfully imported");
            pGPAsymmetricKeyUtil.savePUKeyRingCollection();
        }

    }//GEN-LAST:event_jButton4ActionPerformed

    private void dsaRBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dsaRBActionPerformed
        // TODO add your handling code here:
        keySize4096RB.setVisible(false);
    }//GEN-LAST:event_dsaRBActionPerformed

    private void elGamalRBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_elGamalRBActionPerformed
        // TODO add your handling code here:
        keySize4096RB.setVisible(true);
    }//GEN-LAST:event_elGamalRBActionPerformed

    private void deleteKeyFromSpecficRing(long keyID) {
        boolean success = true;
        if (showSecretKeysRingRB.getSelectedObjects() != null) {
            String password = getUserPassword();
            success = pGPAsymmetricKeyUtil.deleteSCKeyRing(keyID, password);
        } else if (showPublicKeysRingRB.getSelectedObjects() != null) {
            success = pGPAsymmetricKeyUtil.deletePUKeyRing(keyID);
        }
        if (!success) {
            GUIUtil.showErrorMessage("Wrong password");
        } else {
            GUIUtil.showInfoMessage("Key successfuly deleted");
        }
        pGPAsymmetricKeyUtil.saveSCKeyRingCollection();
        showSpecificKeyRingCollection();
    }

    private long getIDOfSelectedKey() {
        int selectedRow = keyRingTable.getSelectedRow();
        if (selectedRow == -1) {
            GUIUtil.showErrorMessage("Key not selected");
            return -1;
        }
        long keyId = Long.parseLong((String) keyRingTable.getModel().getValueAt(selectedRow, ColumName.KEYID.ordinal()));
        return keyId;
    }

    private void deleteKeyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteKeyActionPerformed
        // TODO add your handling code here:

        long keyID = getIDOfSelectedKey();
        if (keyID == -1) {
            return;
        }
        deleteKeyFromSpecficRing(keyID);

    }//GEN-LAST:event_deleteKeyActionPerformed

    private String getUserPassword() {
        passwordRequestDialog.setVisible(true);

        System.out.println("etf.openpgp.cf170065dsd1700145d.GUI.MainWindow.generateNewKeyPaitButtonActionPerformed()");

        String userPassword = new String(passwordField.getPassword());

        if (userPassword.length() == 0) {
            GUIUtil.showErrorMessage(" Password cant be empty");
            return null;
        }

        System.out.println(userPassword);
        passwordField.setText("");
        return userPassword;
    }

    private String getSelectedFilePath(JFileChooser fileChooser) {
        String path = fileChooser.getSelectedFile().getAbsolutePath();
        System.out.println(path);
        return path;
    }

    private String getSelectedFile() {
        return this.getSelectedFile(this.fileChooser);
    }

    private String getSelectedFile(JFileChooser fileChooser) {
        int result = fileChooser.showOpenDialog(null);
        if (result != JFileChooser.APPROVE_OPTION) {
            GUIUtil.showErrorMessage("File not selectedl");
            return "";
        }
        String path = fileChooser.getSelectedFile().getAbsolutePath();
        System.out.println(path);
        return path;
    }
    private void generateNewKeyPaitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_generateNewKeyPaitButtonActionPerformed
        // TODO add your handling code here:
        String userName = userNameTF.getText(), userEmail = userEmailTF.getText();

        if (userName.length() == 0 || GUIUtil.checkEmail(userEmail) == false) {
            GUIUtil.showErrorMessage("Name or Email not ok");
            return;
        }

        String keyAlgorithm = keyType.getSelection().getActionCommand();
        int sizeOfKey = Integer.parseInt(this.keySize.getSelection().getActionCommand());

        String userPassword = getUserPassword();

        boolean succesful = pGPAsymmetricKeyUtil.generateNewKeyRing(userName, userEmail, userPassword, keyAlgorithm, sizeOfKey);
        if (!succesful) {
            GUIUtil.showErrorMessage("Error while generating and saving new key");
        } else {
            GUIUtil.showInfoMessage("New key succesfully generated");
        }

    }//GEN-LAST:event_generateNewKeyPaitButtonActionPerformed

    private void chooseMessageSourceButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chooseMessageSourceButtonActionPerformed
        chooseMessageSourceFC.showOpenDialog(null);
    }//GEN-LAST:event_chooseMessageSourceButtonActionPerformed

    private void signCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_signCBActionPerformed
        signMessageOptionPanel.setVisible(signCB.isSelected());
    }//GEN-LAST:event_signCBActionPerformed

    private void encryptCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_encryptCBActionPerformed
        // TODO add your handling code here:
        encrytpionMessageOptionPanel.setVisible(encryptCB.isSelected());


    }//GEN-LAST:event_encryptCBActionPerformed

    private void compressionCheckboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_compressionCheckboxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_compressionCheckboxActionPerformed

    private void chooseMessageDestinationButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chooseMessageDestinationButtonActionPerformed
        chooseMessageDestinationFC.showOpenDialog(null);
    }//GEN-LAST:event_chooseMessageDestinationButtonActionPerformed

    private void passwordFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_passwordFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_passwordFieldActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        passwordRequestDialog.setVisible(false);
        passwordRequestDialog.dispose();
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jRadioButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton6ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jRadioButton6ActionPerformed

    private enum ColumName {
        NAME, EMAIL, KEYID, Algorithm, TimeStamp
    }

    private void showSecretKeyRingCollection() {
        ArrayList<PGPSecretKeyRing> secretKeyRings = pGPAsymmetricKeyUtil.getSecretKeyRings();

        TableModel tableModel = new DefaultTableModel(columNameString, secretKeyRings.size());

        for (int row = 0; row < secretKeyRings.size(); row++) {

            PGPSecretKeyRing pgpSecretKeyRing = secretKeyRings.get(row);
            PGPKeyInfo pgpKeyInfo = new PGPKeyInfo(pgpSecretKeyRing);

            tableModel.setValueAt(pgpKeyInfo.getName(), row, ColumName.NAME.ordinal());
            tableModel.setValueAt(pgpKeyInfo.getEmail(), row, ColumName.EMAIL.ordinal());
            tableModel.setValueAt(pgpKeyInfo.getPublicKeyId(), row, ColumName.KEYID.ordinal());
            tableModel.setValueAt(pgpKeyInfo.getAlgorithm(), row, ColumName.Algorithm.ordinal());
            tableModel.setValueAt(pgpKeyInfo.getTimeStamp(), row, ColumName.TimeStamp.ordinal());

        }

        keyRingTable.setModel(tableModel);
    }

    private void showPublicKeyRingCollection() {
        ArrayList<PGPPublicKeyRing> secretKeyRings = pGPAsymmetricKeyUtil.getPublicKeyRings();

        TableModel tableModel = new DefaultTableModel(columNameString, secretKeyRings.size());

        for (int row = 0; row < secretKeyRings.size(); row++) {

            PGPPublicKeyRing pgpPublicKeyRing = secretKeyRings.get(row);
            PGPKeyInfo pgpKeyInfo = new PGPKeyInfo(pgpPublicKeyRing);

            tableModel.setValueAt(pgpKeyInfo.getName(), row, ColumName.NAME.ordinal());
            tableModel.setValueAt(pgpKeyInfo.getEmail(), row, ColumName.EMAIL.ordinal());
            tableModel.setValueAt(pgpKeyInfo.getPublicKeyId(), row, ColumName.KEYID.ordinal());
            tableModel.setValueAt(pgpKeyInfo.getAlgorithm(), row, ColumName.Algorithm.ordinal());
            tableModel.setValueAt(pgpKeyInfo.getTimeStamp(), row, ColumName.TimeStamp.ordinal());

        }

        keyRingTable.setModel(tableModel);
    }

    private final String columNameString[] = new String[]{"Name", "Email", "PU key ID", "Algorithm", "Timestamp"};

    private void showSpecificKeyRingCollection() {

        if (showPublicKeysRingRB.getSelectedObjects() != null) {
            showPublicKeyRingCollection();
        }

        if (showSecretKeysRingRB.getSelectedObjects() != null) {
            showSecretKeyRingCollection();
        }

    }

    private void showSecretKeysRingRBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showSecretKeysRingRBActionPerformed

        exportPK.setVisible(true);
        showSecretKeyRingCollection();
    }//GEN-LAST:event_showSecretKeysRingRBActionPerformed

    private void showPublicKeysRingRBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showPublicKeysRingRBActionPerformed
        exportPK.setVisible(false);
        showPublicKeyRingCollection();
    }//GEN-LAST:event_showPublicKeysRingRBActionPerformed

    private void showSecretKeysID() {
        List<PGPSecretKeyRing> secretKeyRings = pGPAsymmetricKeyUtil.getSecretKeyRings();

        Vector<String> keysID = new Vector<>();
        for (int row = 0; row < secretKeyRings.size(); row++) {

            PGPSecretKeyRing pgpSecretKeyRing = secretKeyRings.get(row);
            PGPKeyInfo pgpKeyInfo = new PGPKeyInfo(pgpSecretKeyRing);
            keysID.add(pgpKeyInfo.getPublicKeyId());
        }
        secretKeyList.setListData(keysID);
    }

    private void showPublicKeysID() {
        List<PGPPublicKeyRing> publicKeyRings = pGPAsymmetricKeyUtil.getPublicKeyRings();

        Vector<String> keysID = new Vector<>();
        for (int row = 0; row < publicKeyRings.size(); row++) {

            PGPPublicKeyRing pgpPublicKeyRing = publicKeyRings.get(row);
            PGPKeyInfo pgpKeyInfo = new PGPKeyInfo(pgpPublicKeyRing);
            keysID.add(pgpKeyInfo.getPublicKeyId());
        }
        publicKeyList.setListData(keysID);
    }

    private void showKeyRingCollectionPaneMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_showKeyRingCollectionPaneMouseClicked
        showSpecificKeyRingCollection();
        showPublicKeysID();
        showSecretKeysID();


    }//GEN-LAST:event_showKeyRingCollectionPaneMouseClicked

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        chooseMessageDestinationFC.showOpenDialog(null);        // TODO add your handling code here:
    }//GEN-LAST:event_jButton7ActionPerformed

    private void exportKeyFromSpecificKeyRingCollection(long keyID, String path) {
        boolean success = true;
        if (showSecretKeysRingRB.getSelectedObjects() != null) {

            success = pGPAsymmetricKeyUtil.exporPUtKeyFromSCKeyRingCollection(keyID, path);
        } else if (showPublicKeysRingRB.getSelectedObjects() != null) {
            success = pGPAsymmetricKeyUtil.exportKeyFromPURingCollection(keyID, path);
        }
        if (!success) {
            GUIUtil.showErrorMessage("Error while exporting");
        } else {
            GUIUtil.showInfoMessage("Key successfuly exported");
        }

    }

    private void exportPUActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportPUActionPerformed

        long keyID = getIDOfSelectedKey();
        if (keyID == -1) {
            return;
        }

        String path = getSelectedFile();
        if (path.length() == 0) {
            return;
        }

        exportKeyFromSpecificKeyRingCollection(keyID, path);
    }//GEN-LAST:event_exportPUActionPerformed

    private void exportPKActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportPKActionPerformed
        long keyID = getIDOfSelectedKey();
        if (keyID == -1) {
            return;
        }

        String path = getSelectedFile();
        if (path.length() == 0) {
            return;
        }
        boolean success = pGPAsymmetricKeyUtil.exportKeyFromSCKeyRingCollection(keyID, path);
        if (!success) {
            GUIUtil.showErrorMessage("Error while exporting key");
        } else {
            GUIUtil.showInfoMessage("Key successfully exported");
        }
    }//GEN-LAST:event_exportPKActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        // TODO add your handling code here:
        chooseMessageSourceFC.showOpenDialog(null);
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
        // TODO add your handling code here:
        try {
            boolean requiresRadix = radixCheckbox.isSelected();
            boolean requiresEncryption = encryptCB.isSelected();
            boolean requiresCompression = compressionCheckbox.isSelected();
            boolean requiresSignature = signCB.isSelected();
            String encrAlgorithmString = encrAlgoGroup.getSelection().getActionCommand();
            String password = "";
            if (requiresSignature) {
                password = getUserPassword();
            }
            int encryptionAlgorithm = PGPEncryptedData.IDEA;
            if (encrAlgorithmString.contains("3DES")) {
                encryptionAlgorithm = PGPEncryptedData.TRIPLE_DES;
            }
            PGPMessageSenderDriver.util = pGPAsymmetricKeyUtil;

            long privateKeyID = -1;
            if (secretKeyList.getSelectedValue() != null) {
                privateKeyID = Long.parseLong(secretKeyList.getSelectedValue());
                System.out.println("Private key ID: " + privateKeyID);
            }

            List<Long> publicKeyIDs = new LinkedList<>();
            publicKeyList.getSelectedValuesList().forEach(s -> {
                publicKeyIDs.add(Long.parseLong(s));
                System.out.println("Public Key ID: " + Long.parseLong(s));
            });

            if (requiresEncryption && publicKeyIDs.isEmpty()) {
                GUIUtil.showErrorMessage("Public keys not selected");
                return;
            }

            String inputFile = getSelectedFilePath(chooseMessageSourceFC);
            String outputFile = getSelectedFilePath(chooseMessageDestinationFC);
            if (inputFile.length() == 0 || outputFile.length() == 0) {
                return;
            }

            PGPMessageSenderDriver msgDriver = new PGPMessageSenderDriver();
            msgDriver.setRequiresCompression(requiresCompression);
            msgDriver.setRequiresRadix64(requiresRadix);
            msgDriver.setPassword(password);
            msgDriver.configEncryption(requiresEncryption, publicKeyIDs, encryptionAlgorithm);
            try {
                msgDriver.configSignature(requiresSignature, privateKeyID);
            } catch (PGPException e) {
                GUIUtil.showErrorMessage("Wrong key password");
                return;
            }
            msgDriver.encryptMessage(inputFile, outputFile);

            GUIUtil.showInfoMessage("Message created");
        } catch (Exception e) {
            GUIUtil.showErrorMessage("Error while parsing input data and parameters");
            e.printStackTrace();
        }


    }//GEN-LAST:event_jButton8ActionPerformed

    private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton9ActionPerformed
        // TODO add your handling code here:
        PGPMessageSenderDriver.util = pGPAsymmetricKeyUtil;
        String inputFile = getSelectedFilePath(chooseMessageSourceFC);
        String outputFile = getSelectedFilePath(chooseMessageDestinationFC);
        PGPMessageSenderDriver msgDriver = new PGPMessageSenderDriver();
        if (inputFile.length() == 0 || outputFile.length() == 0) {
            return;
        }
        msgDriver.setInputFile(inputFile);
        msgDriver.setOutputFile(outputFile);
        msgDriver.readFileToDecrypt(inputFile);
        try {
            msgDriver.decodeDecryptoinPhase();

            boolean incorrectPassword = false;
            msgDriver.setPassword("");
            do {
                incorrectPassword = false;
                try {
                    msgDriver.decryptDecryptionPhase();
                } catch (PGPException ex) {
                    incorrectPassword = true;
                    String password = getUserPassword();
                    if (password == null) {
                        return;
                    }
                    msgDriver.setPassword(password);
                }
            } while (incorrectPassword);

            msgDriver.decompressDecryptionPhase();
            msgDriver.verifySignatureDecriptionPhase();
            String messageAuthor = msgDriver.getMessageAuthor();
            if (messageAuthor == null) {
                GUIUtil.showInfoMessage("Received unsigned message");
            } else {
                GUIUtil.showInfoMessage("Received signed message from " + messageAuthor);
            }
            msgDriver.literalDataDecryptionPhase();
            msgDriver.writeToFileDecrypted(outputFile);
        } catch (Exception e) {
                    GUIUtil.showErrorMessage(e.toString());
        }

    }//GEN-LAST:event_jButton9ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        Security.addProvider(new BouncyCastleProvider());

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainWindow().setVisible(true);
            }
        });
    }
//PGP
    PGPAsymmetricKeyUtil pGPAsymmetricKeyUtil = new PGPAsymmetricKeyUtil();


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel ImportKeyMessage;
    private javax.swing.JButton chooseMessageDestinationButton;
    private javax.swing.JFileChooser chooseMessageDestinationFC;
    private javax.swing.JButton chooseMessageSourceButton;
    private javax.swing.JFileChooser chooseMessageSourceFC;
    private javax.swing.JCheckBox compressionCheckbox;
    private javax.swing.JButton deleteKey;
    private javax.swing.JRadioButton dsaRB;
    private javax.swing.JRadioButton elGamalRB;
    private javax.swing.ButtonGroup encrAlgoGroup;
    private javax.swing.JCheckBox encryptCB;
    private javax.swing.JPanel encrytpionMessageOptionPanel;
    private javax.swing.JButton exportPK;
    private javax.swing.JButton exportPU;
    private javax.swing.JFileChooser fileChooser;
    private javax.swing.JButton generateNewKeyPaitButton;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JButton jButton9;
    private javax.swing.JComboBox<String> jComboBox2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JRadioButton jRadioButton3;
    private javax.swing.JRadioButton jRadioButton4;
    private javax.swing.JRadioButton jRadioButton6;
    private javax.swing.JRadioButton jRadioButton7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable keyRingTable;
    private javax.swing.ButtonGroup keySize;
    private javax.swing.JRadioButton keySize4096RB;
    private javax.swing.ButtonGroup keyType;
    private javax.swing.JPasswordField passwordField;
    private javax.swing.JDialog passwordRequestDialog;
    private javax.swing.JList<String> publicKeyList;
    private javax.swing.JCheckBox radixCheckbox;
    private javax.swing.JList<String> secretKeyList;
    private javax.swing.ButtonGroup showKeyRing;
    private javax.swing.JTabbedPane showKeyRingCollectionPane;
    private javax.swing.JRadioButton showPublicKeysRingRB;
    private javax.swing.JRadioButton showSecretKeysRingRB;
    private javax.swing.JCheckBox signCB;
    private javax.swing.JPanel signMessageOptionPanel;
    private javax.swing.JTextField userEmailTF;
    private javax.swing.JTextField userNameTF;
    // End of variables declaration//GEN-END:variables
}
